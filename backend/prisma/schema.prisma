datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             String  @id @default(cuid())
  username       String  @unique
  password       String
  email          String
  uploadedImages Image[] @relation(name: "UploadedImages")
  ownedImages    Image[] @relation(name: "OwnedImages")
  likes          Likes[]
  uploadJobs     UploadJob[]
  followers      Following[] @relation(name: "Followers")
  following      Following[] @relation(name: "Followees")
  forSale       Boolean @default(false)
  amount      Int?
  currency    String?
  discount    Int?
  stripeAccountId String?
  createdAt   DateTime  @default(now())
}

model Following {
  followerId String
  followeeId String
  follower  User @relation(name: "Followees", fields: [followerId], references: [id])
  followee  User @relation(name: "Followers", fields: [followeeId], references: [id])
  paid      Boolean // whether the follower has paid to see the followee's private memes
  @@id([followerId, followeeId])
}

model Image {
  id          String    @id @default(cuid())
  hash        String    @unique
  url         String    @unique
  title       String
  amount      Int?
  currency    String?
  discount    Int?
  forSale     Boolean
  public      Boolean
  
  uploaderId  String
  ownerId     String
  uploadJobId String?
  uploader    User      @relation(name: "UploadedImages", fields: [uploaderId], references: [id])
  owner       User      @relation(name: "OwnedImages", fields: [ownerId], references: [id])
  likes       Likes[]
  uploadJob   UploadJob? @relation(fields: [uploadJobId], references: [id])
  createdAt   DateTime  @default(now())
}

model Likes {
  userId  String
  imageId String
  image   Image  @relation(fields: [imageId], references: [id])
  user    User   @relation(fields: [userId], references: [id])
  @@id([userId, imageId])
}

enum JobStatus {
  PENDING
  RUNNING
  COMPLETED
}

model UploadJob {
  id                String  @id
  status            JobStatus
  errors            Json @default("[]")
  successCount      Int @default(0)
  errorCount        Int @default(0)
  creatorId         String
  creator           User  @relation(fields: [creatorId], references: [id])
  successfulUploads Image[]
}
