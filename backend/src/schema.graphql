
type User {
    id: ID!
    username: String!
    email: String!
    inventory: [Image!]!
    # True if the user has been set up to
    # accept payments on their account
    acceptingPayments: Boolean!
}

type Price {
    amount: Int!
    currency: String!
    discount: Int! # percentage w/ 2 decimal places
}

input PriceInput {
    amount: Int!
    currency: String!
    discount: Int! # percentage w/ 2 decimal places
}

type ImageOwnership {
    uploader: User!
    owner: User!
}

type Image {
    id: ID!
    hash: String!
    url: String!
    title: String
    ownership: ImageOwnership!
    price: Price
    forSale: Boolean!
    public: Boolean!
    likes: Int!
    likedByMe: Boolean!
}

type Error {
    input: String!
    message: String!
}

enum JobStatus {
    PENDING
    RUNNING
    COMPLETED
}

type Job {
    id: ID!
    status: JobStatus!
    errors: [Error!]!
    successCount: Int!
    errorCount: Int!
    creator: User!
    successfulUploads: [Image!]!
}

input SearchInput {
    imageUrl: String
    textQuery: String
}

input PurchaseImageInput {
    imageID: ID!
    price: Int!
}

input UploadImageInput {
    url: String!
    price: PriceInput
    forSale: Boolean!
    public: Boolean!
    title: String
}

input UpdateImageInput {
    id: ID!
    price: PriceInput
    forSale: Boolean
    public: Boolean
    title: String
}

input LoginInput {
    username: String!
    password: String!
}

input RegisterInput {
    username: String!
    password: String!
    email: String!
}

type UploadUrl {
    signedUrl: String!
    key: String!
}

enum SortField {
    PRICE
    LIKES
    UPLOAD_DATE
}

input ImageQuery {
    sort: SortField!
    ascending: Boolean!
    offset: Int!
    limit: Int!
    userFilter: ID
}

union Object = Image | User

type Query {
    search(query: String): [Object!]!
    images(query: ImageQuery!): [Image!]!
    get(id: ID!): Object!
    imageUploadUrls(fileExtensions: [String!]!): [UploadUrl!]!
    me: User
}

type ImageMutations {
    purchaseImage(input: PurchaseImageInput!): Image!
    updateImage(input: UpdateImageInput!): Image!
    uploadImage(input: UploadImageInput!): Image!
    uploadImages(input: [UploadImageInput!]!): [Image!]!
    uploadImagesFromFile(url: String!): Job!
    setLike(id: ID!, like: Boolean!): Image
}

type UserMutations {
    login(input: LoginInput!): User!
    register(input: RegisterInput!): User!
}

type Mutation {
    images: ImageMutations!
    users: UserMutations!
}
